// Generated by CoffeeScript 1.7.1
(function() {
  var Account, Sails, User, app, assert, request;

  assert = require('assert');

  request = require('supertest');

  User = require('../../api/models/User');

  Account = require('../../api/models/Account');

  Sails = require('sails');

  app = null;

  before(function(done) {
    return Sails.lift({}, function(err, sails) {
      app = sails;
      return done();
    });
  });

  after(function(done) {
    return app.lower(done);
  });

  describe('Account API', function() {
    return describe('New Account Creation', function() {
      this.baseUrl = 'http://localhost:1337/';
      this.newAccount = {
        email: 'someone@somewhere.com'
      };
      it('should return error if required attributes are missing', (function(_this) {
        return function(done) {
          return request(_this.baseUrl).post('account/provision').send(_this.newAccount).end(function(err, res) {
            if (err != null) {
              throw err;
            }
            assert.equal(res.status, 422, 'Response code doesnt match');
            return done();
          });
        };
      })(this));
      return it('should create Account and an User', (function(_this) {
        return function(done) {
          var account;
          account = {
            email: 'sanasanjay@gmail.com',
            user_name: 'Jack Bower',
            name: 'blueshark'
          };
          request(_this.baseUrl).post('account/provision').send(account).end(function(err, res) {
            if (err != null) {
              throw err;
            }
            console.log(res.body);
            assert.equal(res.status, 200, 'Success response code doenst match');
            return assert.ok(res.body.token, 200, 'Token not returned on account creation.');
          });
          return request(_this.baseUrl).post('account/provision').send(account).end(function(err, res) {
            if (err != null) {
              throw err;
            }
            console.log(res.body);
            assert.equal(res.status, 400, 'Expected error about account name in use.');
            return done();
          });
        };
      })(this));
    });
  });

}).call(this);
